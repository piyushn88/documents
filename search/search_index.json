{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes Commands python -m SimpleHTTPServer 8000 - Python Server: To share the file over network minikube mount /home/piyush/Desktop/cb-credential-service/:/home/docker/cb-credential-service - Mount volume to minikube netstat -punta | grep port - Find service os specicific port ls -l | awk '{print $7}' - To print specific column on terminal k attach -t pod $(k get pods -n dev-core | awk '{print $1}' | grep cb-cred-svc) -n dev-core - To attach pad logs minikube start --cpus 4 --memory 16384 --disk-size=100GB eval $(minikube docker-env) - To enter minikube docker env Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session. Mkdocs Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. mkdocs gh-deploy - Deploy updated code to existing code","title":"Home"},{"location":"#notes","text":"","title":"Notes"},{"location":"#commands","text":"python -m SimpleHTTPServer 8000 - Python Server: To share the file over network minikube mount /home/piyush/Desktop/cb-credential-service/:/home/docker/cb-credential-service - Mount volume to minikube netstat -punta | grep port - Find service os specicific port ls -l | awk '{print $7}' - To print specific column on terminal k attach -t pod $(k get pods -n dev-core | awk '{print $1}' | grep cb-cred-svc) -n dev-core - To attach pad logs minikube start --cpus 4 --memory 16384 --disk-size=100GB eval $(minikube docker-env) - To enter minikube docker env Important note: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session. Mkdocs Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. mkdocs gh-deploy - Deploy updated code to existing code","title":"Commands"},{"location":"airflow/","text":"What is Airflow? Airflow is a platform to programmatically author, schedule and monitor workflows or data pipelines. What is a Workflow? a sequence of tasks started on a schedule or triggered by an event frequently used to handle big data processing pipelines A typical workflows download data from source send data somewhere else to process Monitor when the process is completed Get the result and generate the report Send the report out by email Prerequisites Airflow is written in Python, so I will assume you have it installed on your machine. I\u2019m using Python 3 (because it\u2019s 2017, come on people!), but Airflow is supported on Python 2 as well. I will also assume that you have virtualenv installed. python3 --version Python 3.6.0 virtualenv --version 15.1.0 Install Airflow Let\u2019s create a workspace directory, and inside it a Python 3 virtualenv directory: cd /path/to/my/airflow/workspace virtualenv -p `which python3` venv or virtualenv -p python3 myenv source venv/bin/activate\\ Now let\u2019s install Airflow 1.8: (venv) $ pip install apache-airflow If ERROR : Error while install airflow: By default one of Airflow's dependencies installs a GPL raise RuntimeError(\"By default one of Airflow's dependencies installs a GPL \" RuntimeError: By default one of Airflow's dependencies installs a GPL dependency (unidecode). To avoid this dependency set SLUGIFY_USES_TEXT_UNIDECODE=yes in your environment when you install or upgrade Airflow. To force installing the GPL version set AIRFLOW_GPL_UNIDECODE export AIRFLOW_GPL_UNIDECODE=yes or export SLUGIFY_USES_TEXT_UNIDECODE=yes Using export makes the environment variable available to all the subprocesses. Also, make sure you are using pip install apache-airflow Now we\u2019ll need to create the AIRFLOW_HOME directory where your DAG definition files and Airflow plugins will be stored. Once the directory is created, set the AIRFLOW_HOME environment variable: (venv) $ cd /path/to/my/airflow/workspace (venv) $ mkdir airflow_home (venv) $ export AIRFLOW_HOME='pwd'/airflow_home (venv) $ airflow initdb You should now be able to run Airflow commands. Let\u2019s try by issuing the following: (venv) $ airflow version ____________ _____________ ____ |__( )_________ __/__ /________ __ ____ /| |_ /__ ___/_ /_ __ /_ __ \\_ | /| / / ___ ___ | / _ / _ __/ _ / / /_/ /_ |/ |/ / _/_/ |_/_/ /_/ /_/ /_/ \\____/____/|__/ v1.8.0rc5+apache.incubating If the airflow version command worked, then Airflow also created its default configuration file airflow.cfg in AIRFLOW_HOME: airflow_home \u251c\u2500\u2500 airflow.cfg \u2514\u2500\u2500 unittests.cfg Default configuration values stored in airflow.cfg will be fine for this tutorial, but in case you want to tweak any Airflow settings, this is the file to change. Initialize the Airflow DB Next step is to issue the following command, which will create and initialize the Airflow SQLite database: (venv) $ airflow initdb The database will be created in airflow.db by default. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db - Airflow SQLite DB \u2514\u2500\u2500 unittests.cfg Using SQLite is an adequate solution for local testing and development, but it does not support concurrent access. In a production environment, you will most certainly want to use a more robust database solution such as Postgres or MySQL. Start the Airflow web server Airflow\u2019s UI is provided in the form of a Flask web application. You can start it by issuing the command: (venv) $ airflow webserver Now visit the Airflow UI by navigating your browser to port 8080 on the host where Airflow was started, for example: http://localhost:8080/admin/ Airflow comes with a number of example DAGs. Note that these examples may not work until you have at least one DAG definition file in your own dags_folder. You can hide the example DAGs by changing the load_examples setting in airflow.cfg. First Airflow DAG OK, if everything is ready, let\u2019s start writing some code. We\u2019ll start by creating a Hello World workflow, which does nothing other then sending \u201cHello world!\u201d to the log. Create your dags_folder, that is the directory where your DAG definition files will be stored in AIRFLOW_HOME/dags. Inside that directory create a file named hello_world.py. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db \u251c\u2500\u2500 dags - Your DAGs directory \u2502 \u2514\u2500\u2500 hello_world.py - Your DAG definition file \u2514\u2500\u2500 unittests.cfg Add the following code to dags/hello_world.py: airflow_home/dags/hello_world.pyThis file creates a simple DAG with just two operators, the DummyOperator, which does nothing and a PythonOperator which calls the print_hello function when its task is executed. Running the DAG In order to run DAG, open a second terminal and start the Airflow scheduler by issuing the following commands: from datetime import datetime from airflow import DAG from airflow.operators.dummy_operator import DummyOperator from airflow.operators.python_operator import PythonOperator def print_hello(): return 'Hello world!' dag = DAG('hello_world', description='Simple tutorial DAG', schedule_interval='0 12 * * *', start_date=datetime(2017, 3, 20), catchup=False) dummy_operator = DummyOperator(task_id='dummy_task', retries=3, dag=dag) hello_operator = PythonOperator(task_id='hello_task', python_callable=print_hello, dag=dag) dummy_operator hello_operator $ cd /path/to/my/airflow/workspace $ export AIRFLOW_HOME=`pwd`/airflow_home $ source venv/bin/activate (venv) $ airflow scheduler The scheduler will send tasks for execution. The default Airflow settings rely on an executor named SequentialExecutor, which is started automatically by the scheduler. In production you would probably want to use a more robust executor, such as the CeleryExecutor. When you reload the Airflow UI in your browser, you should see your hello_world DAG listed in Airflow UI. Hello World DAG in Airflow UI In order to start a DAG Run, first turn the workflow on (arrow 1), then click the Trigger Dagbutton (arrow 2) and finally, click on the Graph View (arrow 3) to see the progress of the run. Hello World DAG Run - Graph View You can reload the graph view until both tasks reach the status Success. When they are done, you can click on the hello_task and then click View Log. If everything worked as expected, the log should show a number of lines","title":"Airflow"},{"location":"airflow/#what-is-airflow","text":"Airflow is a platform to programmatically author, schedule and monitor workflows or data pipelines.","title":"What is Airflow?"},{"location":"airflow/#what-is-a-workflow","text":"a sequence of tasks started on a schedule or triggered by an event frequently used to handle big data processing pipelines A typical workflows download data from source send data somewhere else to process Monitor when the process is completed Get the result and generate the report Send the report out by email","title":"What is a Workflow?"},{"location":"airflow/#prerequisites","text":"Airflow is written in Python, so I will assume you have it installed on your machine. I\u2019m using Python 3 (because it\u2019s 2017, come on people!), but Airflow is supported on Python 2 as well. I will also assume that you have virtualenv installed. python3 --version Python 3.6.0 virtualenv --version 15.1.0","title":"Prerequisites"},{"location":"airflow/#install-airflow","text":"Let\u2019s create a workspace directory, and inside it a Python 3 virtualenv directory: cd /path/to/my/airflow/workspace virtualenv -p `which python3` venv or virtualenv -p python3 myenv source venv/bin/activate\\ Now let\u2019s install Airflow 1.8: (venv) $ pip install apache-airflow If ERROR : Error while install airflow: By default one of Airflow's dependencies installs a GPL raise RuntimeError(\"By default one of Airflow's dependencies installs a GPL \" RuntimeError: By default one of Airflow's dependencies installs a GPL dependency (unidecode). To avoid this dependency set SLUGIFY_USES_TEXT_UNIDECODE=yes in your environment when you install or upgrade Airflow. To force installing the GPL version set AIRFLOW_GPL_UNIDECODE export AIRFLOW_GPL_UNIDECODE=yes or export SLUGIFY_USES_TEXT_UNIDECODE=yes Using export makes the environment variable available to all the subprocesses. Also, make sure you are using pip install apache-airflow Now we\u2019ll need to create the AIRFLOW_HOME directory where your DAG definition files and Airflow plugins will be stored. Once the directory is created, set the AIRFLOW_HOME environment variable: (venv) $ cd /path/to/my/airflow/workspace (venv) $ mkdir airflow_home (venv) $ export AIRFLOW_HOME='pwd'/airflow_home (venv) $ airflow initdb You should now be able to run Airflow commands. Let\u2019s try by issuing the following: (venv) $ airflow version ____________ _____________ ____ |__( )_________ __/__ /________ __ ____ /| |_ /__ ___/_ /_ __ /_ __ \\_ | /| / / ___ ___ | / _ / _ __/ _ / / /_/ /_ |/ |/ / _/_/ |_/_/ /_/ /_/ /_/ \\____/____/|__/ v1.8.0rc5+apache.incubating If the airflow version command worked, then Airflow also created its default configuration file airflow.cfg in AIRFLOW_HOME: airflow_home \u251c\u2500\u2500 airflow.cfg \u2514\u2500\u2500 unittests.cfg Default configuration values stored in airflow.cfg will be fine for this tutorial, but in case you want to tweak any Airflow settings, this is the file to change. Initialize the Airflow DB Next step is to issue the following command, which will create and initialize the Airflow SQLite database: (venv) $ airflow initdb The database will be created in airflow.db by default. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db - Airflow SQLite DB \u2514\u2500\u2500 unittests.cfg Using SQLite is an adequate solution for local testing and development, but it does not support concurrent access. In a production environment, you will most certainly want to use a more robust database solution such as Postgres or MySQL. Start the Airflow web server Airflow\u2019s UI is provided in the form of a Flask web application. You can start it by issuing the command: (venv) $ airflow webserver Now visit the Airflow UI by navigating your browser to port 8080 on the host where Airflow was started, for example: http://localhost:8080/admin/ Airflow comes with a number of example DAGs. Note that these examples may not work until you have at least one DAG definition file in your own dags_folder. You can hide the example DAGs by changing the load_examples setting in airflow.cfg. First Airflow DAG OK, if everything is ready, let\u2019s start writing some code. We\u2019ll start by creating a Hello World workflow, which does nothing other then sending \u201cHello world!\u201d to the log. Create your dags_folder, that is the directory where your DAG definition files will be stored in AIRFLOW_HOME/dags. Inside that directory create a file named hello_world.py. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db \u251c\u2500\u2500 dags - Your DAGs directory \u2502 \u2514\u2500\u2500 hello_world.py - Your DAG definition file \u2514\u2500\u2500 unittests.cfg Add the following code to dags/hello_world.py: airflow_home/dags/hello_world.pyThis file creates a simple DAG with just two operators, the DummyOperator, which does nothing and a PythonOperator which calls the print_hello function when its task is executed. Running the DAG In order to run DAG, open a second terminal and start the Airflow scheduler by issuing the following commands: from datetime import datetime from airflow import DAG from airflow.operators.dummy_operator import DummyOperator from airflow.operators.python_operator import PythonOperator def print_hello(): return 'Hello world!' dag = DAG('hello_world', description='Simple tutorial DAG', schedule_interval='0 12 * * *', start_date=datetime(2017, 3, 20), catchup=False) dummy_operator = DummyOperator(task_id='dummy_task', retries=3, dag=dag) hello_operator = PythonOperator(task_id='hello_task', python_callable=print_hello, dag=dag) dummy_operator hello_operator $ cd /path/to/my/airflow/workspace $ export AIRFLOW_HOME=`pwd`/airflow_home $ source venv/bin/activate (venv) $ airflow scheduler The scheduler will send tasks for execution. The default Airflow settings rely on an executor named SequentialExecutor, which is started automatically by the scheduler. In production you would probably want to use a more robust executor, such as the CeleryExecutor. When you reload the Airflow UI in your browser, you should see your hello_world DAG listed in Airflow UI. Hello World DAG in Airflow UI In order to start a DAG Run, first turn the workflow on (arrow 1), then click the Trigger Dagbutton (arrow 2) and finally, click on the Graph View (arrow 3) to see the progress of the run. Hello World DAG Run - Graph View You can reload the graph view until both tasks reach the status Success. When they are done, you can click on the hello_task and then click View Log. If everything worked as expected, the log should show a number of lines","title":"Install Airflow"},{"location":"git/","text":"Git ls -la - Show folder content Setup which git - See where Git is located: git --version - Get the version of Git: git status - Create an alias (shortcut) for git config --global alias.st status git help - Help Basics git init git add . git commit -m \"first commit\" git remote add origin git@bitbucket.org:my_friends_gsl/ad_docker-compose.git git push -u origin master git tag v0.1 git push origin v0.1 General git init - Initialize Git git add . - Get everything ready to commit git add index.html - Get custom file ready to commit git commit -m \"Message\" - Commit changes git commit -m \"Title\" -m \"Description...\" - Commit changes with title and description git commit -am \"Message\" - Add and commit in one step git rm index.html - Remove files from Git git add -u - Update all changes git rm --cached index.html - Remove file but do not track anymore git mv index.html dir/index_new.html - Move or rename files git checkout -- index.html - Undo modifications (restore files from latest commited version): git checkout 6eb715d -- index.html - Restore file from a custom commit (in current branch) Reset git revert 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Go back to commit git reset --soft 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Soft reset (move HEAD only; neither staging nor working dir is changed) git reset --soft HEAD~ - Undo latest commit git reset --mixed 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Mixed reset (move HEAD and change staging to match repo; does not affect working dir) git reset --hard 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Hard reset (move HEAD and change staging dir and working dir to match repo): git checkout @ -- index.html - Hard reset of a single file ( @ is short for HEAD ): Update Delete git clean -n - Test-Delete untracked files git clean -f - Delete untracked files (not staging) git reset HEAD index.html - Unstage (undo adds) git commit --amend -m \"New Message\" - Update most recent commit (also update the commit message) Branch git branch - Show branches git branch branchname - Create branch git checkout branchname - Change to branch git checkout -b branchname - Create and change to new branch git branch -m branchname new_branchname or: git branch --move branchname new_branchname - Rename branch git branch --merged - Show all completely merged branches with current branch git branch -d branchname or: git branch --delete branchname - Delete merged branch (only possible if not HEAD) git branch -D branch_to_delete - Delete not merged branch Merge git merge branchname - True merge (fast forward): git merge --ff-only branchname - Merge to master (only if fast forward) git merge --no-ff branchname - Merge to master (force a new commit) git merge --abort - Stop merge (in case of conflicts) git reset --merge // prior to v1.7.4 Stop merge (in case of conflicts) git reset --hard origin/master - Undo local merge that hasn't been pushed yet git cherry-pick 073791e7 Merge only one specific commit: git checkout branchname \u00bb git rebase master - Rebase or: git merge master branchname (The rebase moves all of the commits in master onto the tip of branchname .) git rebase --abort - Cancel rebase: git rebase -i HEAD~3 - Squash multiple commits into one ( source ) git merge --squash branchname (commit afterwards) Squash-merge a feature branch (as one commit): Stash git stash save \"Message\" - Put in stash git stash list - Show stash git stash show stash@{0} - Show stash stats git stash show -p stash@{0} - Show stash changes git stash pop stash@{0} - Use custom stash item and drop it git stash apply stash@{0} - Use custom stash item and do not drop it git stash apply --index - Use custom stash item and index git stash branch new_branch - Create branch from stash git stash drop stash@{0} - Delete custom stash item git stash clear - Delete complete stash Collaborate git remote - Show remote git remote -v - Show remote details git remote add upstream https://github.com/user/project.git - Add remote upstream from GitHub project git remote add upstream ssh://root@123.123.123.123/path/to/repository/.git - Add remote upstream from existing empty project on server git fetch upstream - Fetch git fetch upstream branchname:local_branchname - Fetch a custom branch git merge upstream/master - Merge fetched commits git remote rm origin - Remove origin git branch -r - Show remote branches git branch -a - Show all branches (remote and local) git checkout -b local_branchname upstream/remote_branchname - Create and checkout branch from a remote branch: git diff origin/master..master - Compare: git push -u origin master - Push (set default with -u ): git push origin master - Push git push origin master --force - Force-Push git pull - Pull git pull origin branchname - Pull specific branch git fetch upstream pull/ID/head:new-pr-branch - Fetch a pull request on GitHub by its ID and create a new branch git clone https://github.com/user/project.git - Clone to localhost or: git clone ssh://user@domain.com/~/dir/.git - Clone to localhost git clone https://github.com/user/project.git ~/dir/folder - Clone to localhost folder git clone -b branchname https://github.com/user/project.git - Clone specific branch to localhost git clone https://oauth2: token @gitlab.com/username/repo.git - Clone with token authentication (in CI environment) git push origin :branchname or: - Delete remote branch (push nothing) git push origin --delete branchname Gitignore Gitkeep https://help.github.com/articles/ignoring-files - About https://github.com/github/gitignore - Useful templates nano .gitignore - Add or edit gitignore touch dir/.gitkeep - Track empty dir Log git log - Show commits: git log --oneline - Show oneline-summary of commits: git log --format=oneline - Show oneline-summary of commits with full SHA-1 git log --oneline -3 - Show oneline-summary of the last three commits: Show only custom commits: git log --author=\"Sven\" git log --grep=\"Message\" git log --until=2013-01-01 git log --since=2013-01-01 Show only custom data of commit: git log --format=short git log --format=full git log --format=fuller git log --format=email git log --format=raw git log -p - Show changes: git log 6eb715d.. index.html Show every commit since special commit for custom file only: git log -p 6eb715d.. index.html - Show changes of every commit since special commit for custom file only: git log --stat --summary - Show stats and summary of commits: git log --graph - Show history of commits as graph: git log --oneline --graph --all --decorate - Show history of commits as graph-summary: Compare git diff - Compare modified files: git diff --color-words index.html - Compare modified files and highlight changes only: git diff --staged - Compare modified files within the staging area: git diff master..branchname - Compare branches: git diff --color-words master..branchname^ - Compare branches like above: Compare commits: `git diff 6eb715d` `git diff 6eb715d..HEAD` `git diff 6eb715d..537a09f` Compare commits of file: `git diff 6eb715d index.html` `git diff 6eb715d..537a09f index.html` Compare without caring about spaces: `git diff -b 6eb715d..HEAD` or: `git diff --ignore-space-change 6eb715d..HEAD` Compare without caring about all spaces: `git diff -w 6eb715d..HEAD` or: `git diff --ignore-all-space 6eb715d..HEAD` Useful comparings: `git diff --stat --summary 6eb715d..HEAD` Blame: `git blame -L10,+1 index.html` Releases Version Tags git tag - Show all released versions git tag -l -n1 - Show all released versions with comments: git tag v1.0.0 - Create release version: git tag -a v1.0.0 -m 'Message' - Create release version with comment: git checkout v1.0.0 - Checkout a specific release version: Git global setup git config --global user.name \"FirstName Lastname\" git config --global user.email \"myemail@gmail.com\" Add submodule `git submodule add git@github xyz .git` `cat .gitmodules` `git diff --cached Mongo-on-Kube` `git diff --cached --submodule` `git commit -am \"Added mongo submodule\"` `git push -u origin master` Archive Create a zip-archive: git archive --format zip --output filename.zip master Export/write custom log to a file: git log --author=sven --all log.txt Troubleshooting Ignore files that have already been committed to a Git repository: http://stackoverflow.com/a/1139797/1815847 Security Hide Git on the web via .htaccess : RedirectMatch 404 /\\.git (more info here: http://stackoverflow.com/a/17916515/1815847) Large File Storage Website: https://git-lfs.github.com/ Install: brew install git-lfs Track *.psd files: git lfs track \"*.psd\" (init, add, commit and push as written above)","title":"Git"},{"location":"git/#git","text":"ls -la - Show folder content","title":"Git"},{"location":"git/#setup","text":"which git - See where Git is located: git --version - Get the version of Git: git status - Create an alias (shortcut) for git config --global alias.st status git help - Help","title":"Setup"},{"location":"git/#basics","text":"git init git add . git commit -m \"first commit\" git remote add origin git@bitbucket.org:my_friends_gsl/ad_docker-compose.git git push -u origin master git tag v0.1 git push origin v0.1","title":"Basics"},{"location":"git/#general","text":"git init - Initialize Git git add . - Get everything ready to commit git add index.html - Get custom file ready to commit git commit -m \"Message\" - Commit changes git commit -m \"Title\" -m \"Description...\" - Commit changes with title and description git commit -am \"Message\" - Add and commit in one step git rm index.html - Remove files from Git git add -u - Update all changes git rm --cached index.html - Remove file but do not track anymore git mv index.html dir/index_new.html - Move or rename files git checkout -- index.html - Undo modifications (restore files from latest commited version): git checkout 6eb715d -- index.html - Restore file from a custom commit (in current branch)","title":"General"},{"location":"git/#reset","text":"git revert 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Go back to commit git reset --soft 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Soft reset (move HEAD only; neither staging nor working dir is changed) git reset --soft HEAD~ - Undo latest commit git reset --mixed 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Mixed reset (move HEAD and change staging to match repo; does not affect working dir) git reset --hard 073791e7dd71b90daa853b2c5acc2c925f02dbc6 - Hard reset (move HEAD and change staging dir and working dir to match repo): git checkout @ -- index.html - Hard reset of a single file ( @ is short for HEAD ):","title":"Reset"},{"location":"git/#update-delete","text":"git clean -n - Test-Delete untracked files git clean -f - Delete untracked files (not staging) git reset HEAD index.html - Unstage (undo adds) git commit --amend -m \"New Message\" - Update most recent commit (also update the commit message)","title":"Update &amp; Delete"},{"location":"git/#branch","text":"git branch - Show branches git branch branchname - Create branch git checkout branchname - Change to branch git checkout -b branchname - Create and change to new branch git branch -m branchname new_branchname or: git branch --move branchname new_branchname - Rename branch git branch --merged - Show all completely merged branches with current branch git branch -d branchname or: git branch --delete branchname - Delete merged branch (only possible if not HEAD) git branch -D branch_to_delete - Delete not merged branch","title":"Branch"},{"location":"git/#merge","text":"git merge branchname - True merge (fast forward): git merge --ff-only branchname - Merge to master (only if fast forward) git merge --no-ff branchname - Merge to master (force a new commit) git merge --abort - Stop merge (in case of conflicts) git reset --merge // prior to v1.7.4 Stop merge (in case of conflicts) git reset --hard origin/master - Undo local merge that hasn't been pushed yet git cherry-pick 073791e7 Merge only one specific commit: git checkout branchname \u00bb git rebase master - Rebase or: git merge master branchname (The rebase moves all of the commits in master onto the tip of branchname .) git rebase --abort - Cancel rebase: git rebase -i HEAD~3 - Squash multiple commits into one ( source ) git merge --squash branchname (commit afterwards) Squash-merge a feature branch (as one commit):","title":"Merge"},{"location":"git/#stash","text":"git stash save \"Message\" - Put in stash git stash list - Show stash git stash show stash@{0} - Show stash stats git stash show -p stash@{0} - Show stash changes git stash pop stash@{0} - Use custom stash item and drop it git stash apply stash@{0} - Use custom stash item and do not drop it git stash apply --index - Use custom stash item and index git stash branch new_branch - Create branch from stash git stash drop stash@{0} - Delete custom stash item git stash clear - Delete complete stash","title":"Stash"},{"location":"git/#collaborate","text":"git remote - Show remote git remote -v - Show remote details git remote add upstream https://github.com/user/project.git - Add remote upstream from GitHub project git remote add upstream ssh://root@123.123.123.123/path/to/repository/.git - Add remote upstream from existing empty project on server git fetch upstream - Fetch git fetch upstream branchname:local_branchname - Fetch a custom branch git merge upstream/master - Merge fetched commits git remote rm origin - Remove origin git branch -r - Show remote branches git branch -a - Show all branches (remote and local) git checkout -b local_branchname upstream/remote_branchname - Create and checkout branch from a remote branch: git diff origin/master..master - Compare: git push -u origin master - Push (set default with -u ): git push origin master - Push git push origin master --force - Force-Push git pull - Pull git pull origin branchname - Pull specific branch git fetch upstream pull/ID/head:new-pr-branch - Fetch a pull request on GitHub by its ID and create a new branch git clone https://github.com/user/project.git - Clone to localhost or: git clone ssh://user@domain.com/~/dir/.git - Clone to localhost git clone https://github.com/user/project.git ~/dir/folder - Clone to localhost folder git clone -b branchname https://github.com/user/project.git - Clone specific branch to localhost git clone https://oauth2: token @gitlab.com/username/repo.git - Clone with token authentication (in CI environment) git push origin :branchname or: - Delete remote branch (push nothing) git push origin --delete branchname","title":"Collaborate"},{"location":"git/#gitignore-gitkeep","text":"https://help.github.com/articles/ignoring-files - About https://github.com/github/gitignore - Useful templates nano .gitignore - Add or edit gitignore touch dir/.gitkeep - Track empty dir","title":"Gitignore &amp; Gitkeep"},{"location":"git/#log","text":"git log - Show commits: git log --oneline - Show oneline-summary of commits: git log --format=oneline - Show oneline-summary of commits with full SHA-1 git log --oneline -3 - Show oneline-summary of the last three commits: Show only custom commits: git log --author=\"Sven\" git log --grep=\"Message\" git log --until=2013-01-01 git log --since=2013-01-01 Show only custom data of commit: git log --format=short git log --format=full git log --format=fuller git log --format=email git log --format=raw git log -p - Show changes: git log 6eb715d.. index.html Show every commit since special commit for custom file only: git log -p 6eb715d.. index.html - Show changes of every commit since special commit for custom file only: git log --stat --summary - Show stats and summary of commits: git log --graph - Show history of commits as graph: git log --oneline --graph --all --decorate - Show history of commits as graph-summary:","title":"Log"},{"location":"git/#compare","text":"git diff - Compare modified files: git diff --color-words index.html - Compare modified files and highlight changes only: git diff --staged - Compare modified files within the staging area: git diff master..branchname - Compare branches: git diff --color-words master..branchname^ - Compare branches like above: Compare commits: `git diff 6eb715d` `git diff 6eb715d..HEAD` `git diff 6eb715d..537a09f` Compare commits of file: `git diff 6eb715d index.html` `git diff 6eb715d..537a09f index.html` Compare without caring about spaces: `git diff -b 6eb715d..HEAD` or: `git diff --ignore-space-change 6eb715d..HEAD` Compare without caring about all spaces: `git diff -w 6eb715d..HEAD` or: `git diff --ignore-all-space 6eb715d..HEAD` Useful comparings: `git diff --stat --summary 6eb715d..HEAD` Blame: `git blame -L10,+1 index.html`","title":"Compare"},{"location":"git/#releases-version-tags","text":"git tag - Show all released versions git tag -l -n1 - Show all released versions with comments: git tag v1.0.0 - Create release version: git tag -a v1.0.0 -m 'Message' - Create release version with comment: git checkout v1.0.0 - Checkout a specific release version:","title":"Releases &amp; Version Tags"},{"location":"git/#git-global-setup","text":"git config --global user.name \"FirstName Lastname\" git config --global user.email \"myemail@gmail.com\"","title":"Git global setup"},{"location":"git/#add-submodule","text":"`git submodule add git@github xyz .git` `cat .gitmodules` `git diff --cached Mongo-on-Kube` `git diff --cached --submodule` `git commit -am \"Added mongo submodule\"` `git push -u origin master`","title":"Add submodule"},{"location":"git/#archive","text":"Create a zip-archive: git archive --format zip --output filename.zip master Export/write custom log to a file: git log --author=sven --all log.txt","title":"Archive"},{"location":"git/#troubleshooting","text":"Ignore files that have already been committed to a Git repository: http://stackoverflow.com/a/1139797/1815847","title":"Troubleshooting"},{"location":"git/#security","text":"Hide Git on the web via .htaccess : RedirectMatch 404 /\\.git (more info here: http://stackoverflow.com/a/17916515/1815847)","title":"Security"},{"location":"git/#large-file-storage","text":"Website: https://git-lfs.github.com/ Install: brew install git-lfs Track *.psd files: git lfs track \"*.psd\" (init, add, commit and push as written above)","title":"Large File Storage"},{"location":"minikube/","text":"Installation Minikube Install Docker CE sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" sudo apt-get update sudo apt-get install docker-ce docker version Install kubectl ( v1.7.0 is latest): Instructions here curl -LO https://storage.googleapis.com/kubernetes-release release/$(curl -s https://storage.googleapis.com/kubernetes-release release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl kubectl version Install minikube ( v0.21.0 is latest): Instructions here curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 chmod +x minikube sudo install minikube /usr/local/bin * Install VirtualBox * wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc-O- | sudo apt-key add - sudo apt-get update sudo apt-get install virtualbox Configure your cluster:S minikube config set memory 4096 minikube config set cpus 2 minikube config set disk-size 30g Set `--memory`, `--cpus`, `--disk-size` to values acceptable to you and resources available on your hosting environment. The above should be considered **minimums.** minikube start --cpus 4 --memory 8192 --disk-size=80GB Configure your hypervisor For MacOS/VirtualBox $ minikube config set vm-driver virtualbox For Linux/KVM: $ minikube config set vm-driver kvm Note that --vm-driver is hosting OS specific. For MacOS use one of virtualbox or xhyve . Start your cluster: $ minikube start (Optional) Enable heapster for memory cpu usage statistics: minikube addons enable heapster Install helm For MacOS `brew install kubernetes-helm` For Linux `sudo snap install helm --classic` Run Helm and wait for kube-system pods up `helm init` Impartant commands eval $(minikube docker-env) **Important note**: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session. Stop your cluster: $ minikube stop","title":"Minikube"},{"location":"minikube/#installation-minikube","text":"","title":"Installation Minikube"},{"location":"minikube/#install-docker-ce","text":"sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" sudo apt-get update sudo apt-get install docker-ce docker version","title":"Install Docker CE"},{"location":"minikube/#install-kubectl-v170-is-latest-instructions-here","text":"curl -LO https://storage.googleapis.com/kubernetes-release release/$(curl -s https://storage.googleapis.com/kubernetes-release release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl kubectl version","title":"Install kubectl (v1.7.0 is latest): Instructions here"},{"location":"minikube/#install-minikube-v0210-is-latest-instructions-here","text":"curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 chmod +x minikube sudo install minikube /usr/local/bin","title":"Install minikube (v0.21.0 is latest): Instructions here"},{"location":"minikube/#install-virtualbox","text":"wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc-O- | sudo apt-key add - sudo apt-get update sudo apt-get install virtualbox","title":"* Install VirtualBox *"},{"location":"minikube/#configure-your-clusters","text":"minikube config set memory 4096 minikube config set cpus 2 minikube config set disk-size 30g Set `--memory`, `--cpus`, `--disk-size` to values acceptable to you and resources available on your hosting environment. The above should be considered **minimums.** minikube start --cpus 4 --memory 8192 --disk-size=80GB","title":"Configure your cluster:S"},{"location":"minikube/#configure-your-hypervisor","text":"For MacOS/VirtualBox $ minikube config set vm-driver virtualbox For Linux/KVM: $ minikube config set vm-driver kvm Note that --vm-driver is hosting OS specific. For MacOS use one of virtualbox or xhyve .","title":"Configure your hypervisor"},{"location":"minikube/#start-your-cluster","text":"$ minikube start","title":"Start your cluster:"},{"location":"minikube/#optional-enable-heapster-for-memory-cpu-usage-statistics","text":"minikube addons enable heapster","title":"(Optional) Enable heapster for memory &amp; cpu usage statistics:"},{"location":"minikube/#install-helm","text":"For MacOS `brew install kubernetes-helm` For Linux `sudo snap install helm --classic` Run Helm and wait for kube-system pods up `helm init`","title":"Install helm"},{"location":"minikube/#impartant-commands","text":"eval $(minikube docker-env) **Important note**: You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session.","title":"Impartant commands"},{"location":"minikube/#stop-your-cluster","text":"$ minikube stop","title":"Stop your cluster:"}]}