{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes Commands Python Server To share the file over network python -m SimpleHTTPServer 8000 mount volume to minikube * minikube mount /home/piyush/Desktop/cb-credential-service/:/home/docker/cb-credential-service Mkdocs Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Home"},{"location":"#notes","text":"","title":"Notes"},{"location":"#commands","text":"Python Server To share the file over network python -m SimpleHTTPServer 8000 mount volume to minikube * minikube mount /home/piyush/Desktop/cb-credential-service/:/home/docker/cb-credential-service Mkdocs Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"airflow/","text":"What is Airflow? Airflow is a platform to programmatically author, schedule and monitor workflows or data pipelines. What is a Workflow? a sequence of tasks started on a schedule or triggered by an event frequently used to handle big data processing pipelines A typical workflows download data from source send data somewhere else to process Monitor when the process is completed Get the result and generate the report Send the report out by email Prerequisites Airflow is written in Python, so I will assume you have it installed on your machine. I\u2019m using Python 3 (because it\u2019s 2017, come on people!), but Airflow is supported on Python 2 as well. I will also assume that you have virtualenv installed. python3 --version Python 3.6.0 virtualenv --version 15.1.0 Install Airflow Let\u2019s create a workspace directory, and inside it a Python 3 virtualenv directory: cd /path/to/my/airflow/workspace virtualenv -p `which python3` venv or virtualenv -p python3 myenv source venv/bin/activate\\ Now let\u2019s install Airflow 1.8: (venv) $ pip install apache-airflow If ERROR : Error while install airflow: By default one of Airflow's dependencies installs a GPL raise RuntimeError(\"By default one of Airflow's dependencies installs a GPL \" RuntimeError: By default one of Airflow's dependencies installs a GPL dependency (unidecode). To avoid this dependency set SLUGIFY_USES_TEXT_UNIDECODE=yes in your environment when you install or upgrade Airflow. To force installing the GPL version set AIRFLOW_GPL_UNIDECODE export AIRFLOW_GPL_UNIDECODE=yes or export SLUGIFY_USES_TEXT_UNIDECODE=yes Using export makes the environment variable available to all the subprocesses. Also, make sure you are using pip install apache-airflow Now we\u2019ll need to create the AIRFLOW_HOME directory where your DAG definition files and Airflow plugins will be stored. Once the directory is created, set the AIRFLOW_HOME environment variable: (venv) $ cd /path/to/my/airflow/workspace (venv) $ mkdir airflow_home (venv) $ export AIRFLOW_HOME='pwd'/airflow_home (venv) $ airflow initdb You should now be able to run Airflow commands. Let\u2019s try by issuing the following: (venv) $ airflow version ____________ _____________ ____ |__( )_________ __/__ /________ __ ____ /| |_ /__ ___/_ /_ __ /_ __ \\_ | /| / / ___ ___ | / _ / _ __/ _ / / /_/ /_ |/ |/ / _/_/ |_/_/ /_/ /_/ /_/ \\____/____/|__/ v1.8.0rc5+apache.incubating If the airflow version command worked, then Airflow also created its default configuration file airflow.cfg in AIRFLOW_HOME: airflow_home \u251c\u2500\u2500 airflow.cfg \u2514\u2500\u2500 unittests.cfg Default configuration values stored in airflow.cfg will be fine for this tutorial, but in case you want to tweak any Airflow settings, this is the file to change. Initialize the Airflow DB Next step is to issue the following command, which will create and initialize the Airflow SQLite database: (venv) $ airflow initdb The database will be created in airflow.db by default. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db - Airflow SQLite DB \u2514\u2500\u2500 unittests.cfg Using SQLite is an adequate solution for local testing and development, but it does not support concurrent access. In a production environment, you will most certainly want to use a more robust database solution such as Postgres or MySQL. Start the Airflow web server Airflow\u2019s UI is provided in the form of a Flask web application. You can start it by issuing the command: (venv) $ airflow webserver Now visit the Airflow UI by navigating your browser to port 8080 on the host where Airflow was started, for example: http://localhost:8080/admin/ Airflow comes with a number of example DAGs. Note that these examples may not work until you have at least one DAG definition file in your own dags_folder. You can hide the example DAGs by changing the load_examples setting in airflow.cfg. First Airflow DAG OK, if everything is ready, let\u2019s start writing some code. We\u2019ll start by creating a Hello World workflow, which does nothing other then sending \u201cHello world!\u201d to the log. Create your dags_folder, that is the directory where your DAG definition files will be stored in AIRFLOW_HOME/dags. Inside that directory create a file named hello_world.py. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db \u251c\u2500\u2500 dags - Your DAGs directory \u2502 \u2514\u2500\u2500 hello_world.py - Your DAG definition file \u2514\u2500\u2500 unittests.cfg Add the following code to dags/hello_world.py: airflow_home/dags/hello_world.pyThis file creates a simple DAG with just two operators, the DummyOperator, which does nothing and a PythonOperator which calls the print_hello function when its task is executed. Running the DAG In order to run DAG, open a second terminal and start the Airflow scheduler by issuing the following commands: from datetime import datetime from airflow import DAG from airflow.operators.dummy_operator import DummyOperator from airflow.operators.python_operator import PythonOperator def print_hello(): return 'Hello world!' dag = DAG('hello_world', description='Simple tutorial DAG', schedule_interval='0 12 * * *', start_date=datetime(2017, 3, 20), catchup=False) dummy_operator = DummyOperator(task_id='dummy_task', retries=3, dag=dag) hello_operator = PythonOperator(task_id='hello_task', python_callable=print_hello, dag=dag) dummy_operator hello_operator $ cd /path/to/my/airflow/workspace $ export AIRFLOW_HOME=`pwd`/airflow_home $ source venv/bin/activate (venv) $ airflow scheduler The scheduler will send tasks for execution. The default Airflow settings rely on an executor named SequentialExecutor, which is started automatically by the scheduler. In production you would probably want to use a more robust executor, such as the CeleryExecutor. When you reload the Airflow UI in your browser, you should see your hello_world DAG listed in Airflow UI. Hello World DAG in Airflow UI In order to start a DAG Run, first turn the workflow on (arrow 1), then click the Trigger Dagbutton (arrow 2) and finally, click on the Graph View (arrow 3) to see the progress of the run. Hello World DAG Run - Graph View You can reload the graph view until both tasks reach the status Success. When they are done, you can click on the hello_task and then click View Log. If everything worked as expected, the log should show a number of lines","title":"Airflow"},{"location":"airflow/#what-is-airflow","text":"Airflow is a platform to programmatically author, schedule and monitor workflows or data pipelines.","title":"What is Airflow?"},{"location":"airflow/#what-is-a-workflow","text":"a sequence of tasks started on a schedule or triggered by an event frequently used to handle big data processing pipelines A typical workflows download data from source send data somewhere else to process Monitor when the process is completed Get the result and generate the report Send the report out by email","title":"What is a Workflow?"},{"location":"airflow/#prerequisites","text":"Airflow is written in Python, so I will assume you have it installed on your machine. I\u2019m using Python 3 (because it\u2019s 2017, come on people!), but Airflow is supported on Python 2 as well. I will also assume that you have virtualenv installed. python3 --version Python 3.6.0 virtualenv --version 15.1.0","title":"Prerequisites"},{"location":"airflow/#install-airflow","text":"Let\u2019s create a workspace directory, and inside it a Python 3 virtualenv directory: cd /path/to/my/airflow/workspace virtualenv -p `which python3` venv or virtualenv -p python3 myenv source venv/bin/activate\\ Now let\u2019s install Airflow 1.8: (venv) $ pip install apache-airflow If ERROR : Error while install airflow: By default one of Airflow's dependencies installs a GPL raise RuntimeError(\"By default one of Airflow's dependencies installs a GPL \" RuntimeError: By default one of Airflow's dependencies installs a GPL dependency (unidecode). To avoid this dependency set SLUGIFY_USES_TEXT_UNIDECODE=yes in your environment when you install or upgrade Airflow. To force installing the GPL version set AIRFLOW_GPL_UNIDECODE export AIRFLOW_GPL_UNIDECODE=yes or export SLUGIFY_USES_TEXT_UNIDECODE=yes Using export makes the environment variable available to all the subprocesses. Also, make sure you are using pip install apache-airflow Now we\u2019ll need to create the AIRFLOW_HOME directory where your DAG definition files and Airflow plugins will be stored. Once the directory is created, set the AIRFLOW_HOME environment variable: (venv) $ cd /path/to/my/airflow/workspace (venv) $ mkdir airflow_home (venv) $ export AIRFLOW_HOME='pwd'/airflow_home (venv) $ airflow initdb You should now be able to run Airflow commands. Let\u2019s try by issuing the following: (venv) $ airflow version ____________ _____________ ____ |__( )_________ __/__ /________ __ ____ /| |_ /__ ___/_ /_ __ /_ __ \\_ | /| / / ___ ___ | / _ / _ __/ _ / / /_/ /_ |/ |/ / _/_/ |_/_/ /_/ /_/ /_/ \\____/____/|__/ v1.8.0rc5+apache.incubating If the airflow version command worked, then Airflow also created its default configuration file airflow.cfg in AIRFLOW_HOME: airflow_home \u251c\u2500\u2500 airflow.cfg \u2514\u2500\u2500 unittests.cfg Default configuration values stored in airflow.cfg will be fine for this tutorial, but in case you want to tweak any Airflow settings, this is the file to change. Initialize the Airflow DB Next step is to issue the following command, which will create and initialize the Airflow SQLite database: (venv) $ airflow initdb The database will be created in airflow.db by default. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db - Airflow SQLite DB \u2514\u2500\u2500 unittests.cfg Using SQLite is an adequate solution for local testing and development, but it does not support concurrent access. In a production environment, you will most certainly want to use a more robust database solution such as Postgres or MySQL. Start the Airflow web server Airflow\u2019s UI is provided in the form of a Flask web application. You can start it by issuing the command: (venv) $ airflow webserver Now visit the Airflow UI by navigating your browser to port 8080 on the host where Airflow was started, for example: http://localhost:8080/admin/ Airflow comes with a number of example DAGs. Note that these examples may not work until you have at least one DAG definition file in your own dags_folder. You can hide the example DAGs by changing the load_examples setting in airflow.cfg. First Airflow DAG OK, if everything is ready, let\u2019s start writing some code. We\u2019ll start by creating a Hello World workflow, which does nothing other then sending \u201cHello world!\u201d to the log. Create your dags_folder, that is the directory where your DAG definition files will be stored in AIRFLOW_HOME/dags. Inside that directory create a file named hello_world.py. airflow_home \u251c\u2500\u2500 airflow.cfg \u251c\u2500\u2500 airflow.db \u251c\u2500\u2500 dags - Your DAGs directory \u2502 \u2514\u2500\u2500 hello_world.py - Your DAG definition file \u2514\u2500\u2500 unittests.cfg Add the following code to dags/hello_world.py: airflow_home/dags/hello_world.pyThis file creates a simple DAG with just two operators, the DummyOperator, which does nothing and a PythonOperator which calls the print_hello function when its task is executed. Running the DAG In order to run DAG, open a second terminal and start the Airflow scheduler by issuing the following commands: from datetime import datetime from airflow import DAG from airflow.operators.dummy_operator import DummyOperator from airflow.operators.python_operator import PythonOperator def print_hello(): return 'Hello world!' dag = DAG('hello_world', description='Simple tutorial DAG', schedule_interval='0 12 * * *', start_date=datetime(2017, 3, 20), catchup=False) dummy_operator = DummyOperator(task_id='dummy_task', retries=3, dag=dag) hello_operator = PythonOperator(task_id='hello_task', python_callable=print_hello, dag=dag) dummy_operator hello_operator $ cd /path/to/my/airflow/workspace $ export AIRFLOW_HOME=`pwd`/airflow_home $ source venv/bin/activate (venv) $ airflow scheduler The scheduler will send tasks for execution. The default Airflow settings rely on an executor named SequentialExecutor, which is started automatically by the scheduler. In production you would probably want to use a more robust executor, such as the CeleryExecutor. When you reload the Airflow UI in your browser, you should see your hello_world DAG listed in Airflow UI. Hello World DAG in Airflow UI In order to start a DAG Run, first turn the workflow on (arrow 1), then click the Trigger Dagbutton (arrow 2) and finally, click on the Graph View (arrow 3) to see the progress of the run. Hello World DAG Run - Graph View You can reload the graph view until both tasks reach the status Success. When they are done, you can click on the hello_task and then click View Log. If everything worked as expected, the log should show a number of lines","title":"Install Airflow"},{"location":"git/","text":"Git Show folder content: ls -la Setup See where Git is located: which git Get the version of Git: git --version Create an alias (shortcut) for git status : git config --global alias.st status Help: git help General Initialize Git: git init Get everything ready to commit: git add . Get custom file ready to commit: git add index.html Commit changes: git commit -m \"Message\" Commit changes with title and description: git commit -m \"Title\" -m \"Description...\" Add and commit in one step: git commit -am \"Message\" Remove files from Git: git rm index.html Update all changes: git add -u Remove file but do not track anymore: git rm --cached index.html Move or rename files: git mv index.html dir/index_new.html Undo modifications (restore files from latest commited version): git checkout -- index.html Restore file from a custom commit (in current branch): git checkout 6eb715d -- index.html Reset Go back to commit: git revert 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Soft reset (move HEAD only; neither staging nor working dir is changed): git reset --soft 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Undo latest commit: git reset --soft HEAD~ Mixed reset (move HEAD and change staging to match repo; does not affect working dir): git reset --mixed 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Hard reset (move HEAD and change staging dir and working dir to match repo): git reset --hard 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Hard reset of a single file ( @ is short for HEAD ): git checkout @ -- index.html Update Delete Test-Delete untracked files: git clean -n Delete untracked files (not staging): git clean -f Unstage (undo adds): git reset HEAD index.html Update most recent commit (also update the commit message): git commit --amend -m \"New Message\" Branch Show branches: git branch Create branch: git branch branchname Change to branch: git checkout branchname Create and change to new branch: git checkout -b branchname Rename branch: git branch -m branchname new_branchname or: git branch --move branchname new_branchname Show all completely merged branches with current branch: git branch --merged Delete merged branch (only possible if not HEAD): git branch -d branchname or: git branch --delete branchname Delete not merged branch: git branch -D branch_to_delete Merge True merge (fast forward): git merge branchname Merge to master (only if fast forward): git merge --ff-only branchname Merge to master (force a new commit): git merge --no-ff branchname Stop merge (in case of conflicts): git merge --abort Stop merge (in case of conflicts): git reset --merge // prior to v1.7.4 Undo local merge that hasn't been pushed yet: git reset --hard origin/master Merge only one specific commit: git cherry-pick 073791e7 Rebase: git checkout branchname \u00bb git rebase master or: git merge master branchname (The rebase moves all of the commits in master onto the tip of branchname .) Cancel rebase: git rebase --abort Squash multiple commits into one: git rebase -i HEAD~3 ( source ) Squash-merge a feature branch (as one commit): git merge --squash branchname (commit afterwards) Stash Put in stash: git stash save \"Message\" Show stash: git stash list Show stash stats: git stash show stash@{0} Show stash changes: git stash show -p stash@{0} Use custom stash item and drop it: git stash pop stash@{0} Use custom stash item and do not drop it: git stash apply stash@{0} Use custom stash item and index: git stash apply --index Create branch from stash: git stash branch new_branch Delete custom stash item: git stash drop stash@{0} Delete complete stash: git stash clear Gitignore Gitkeep About: https://help.github.com/articles/ignoring-files Useful templates: https://github.com/github/gitignore Add or edit gitignore: nano .gitignore Track empty dir: touch dir/.gitkeep Log Show commits: git log Show oneline-summary of commits: git log --oneline Show oneline-summary of commits with full SHA-1: git log --format=oneline Show oneline-summary of the last three commits: git log --oneline -3 Show only custom commits: git log --author=\"Sven\" git log --grep=\"Message\" git log --until=2013-01-01 git log --since=2013-01-01 Show only custom data of commit: git log --format=short git log --format=full git log --format=fuller git log --format=email git log --format=raw Show changes: git log -p Show every commit since special commit for custom file only: git log 6eb715d.. index.html Show changes of every commit since special commit for custom file only: git log -p 6eb715d.. index.html Show stats and summary of commits: git log --stat --summary Show history of commits as graph: git log --graph Show history of commits as graph-summary: git log --oneline --graph --all --decorate Compare Compare modified files: git diff Compare modified files and highlight changes only: git diff --color-words index.html Compare modified files within the staging area: git diff --staged Compare branches: git diff master..branchname Compare branches like above: git diff --color-words master..branchname^ Compare commits: git diff 6eb715d git diff 6eb715d..HEAD git diff 6eb715d..537a09f Compare commits of file: git diff 6eb715d index.html git diff 6eb715d..537a09f index.html Compare without caring about spaces: git diff -b 6eb715d..HEAD or: git diff --ignore-space-change 6eb715d..HEAD Compare without caring about all spaces: git diff -w 6eb715d..HEAD or: git diff --ignore-all-space 6eb715d..HEAD Useful comparings: git diff --stat --summary 6eb715d..HEAD Blame: git blame -L10,+1 index.html Releases Version Tags Show all released versions: git tag Show all released versions with comments: git tag -l -n1 Create release version: git tag v1.0.0 Create release version with comment: git tag -a v1.0.0 -m 'Message' Checkout a specific release version: git checkout v1.0.0 Collaborate Show remote: git remote Show remote details: git remote -v Add remote upstream from GitHub project: git remote add upstream https://github.com/user/project.git Add remote upstream from existing empty project on server: git remote add upstream ssh://root@123.123.123.123/path/to/repository/.git Fetch: git fetch upstream Fetch a custom branch: git fetch upstream branchname:local_branchname Merge fetched commits: git merge upstream/master Remove origin: git remote rm origin Show remote branches: git branch -r Show all branches (remote and local): git branch -a Create and checkout branch from a remote branch: git checkout -b local_branchname upstream/remote_branchname Compare: git diff origin/master..master Push (set default with -u ): git push -u origin master Push: git push origin master Force-Push: `git push origin master --force Pull: git pull Pull specific branch: git pull origin branchname Fetch a pull request on GitHub by its ID and create a new branch: git fetch upstream pull/ID/head:new-pr-branch Clone to localhost: git clone https://github.com/user/project.git or: git clone ssh://user@domain.com/~/dir/.git Clone to localhost folder: git clone https://github.com/user/project.git ~/dir/folder Clone specific branch to localhost: git clone -b branchname https://github.com/user/project.git Clone with token authentication (in CI environment): git clone https://oauth2: token @gitlab.com/username/repo.git Delete remote branch (push nothing): git push origin :branchname or: git push origin --delete branchname Archive Create a zip-archive: git archive --format zip --output filename.zip master Export/write custom log to a file: git log --author=sven --all log.txt Troubleshooting Ignore files that have already been committed to a Git repository: http://stackoverflow.com/a/1139797/1815847 Security Hide Git on the web via .htaccess : RedirectMatch 404 /\\.git (more info here: http://stackoverflow.com/a/17916515/1815847) Large File Storage Website: https://git-lfs.github.com/ Install: brew install git-lfs Track *.psd files: git lfs track \"*.psd\" (init, add, commit and push as written above)","title":"Git"},{"location":"git/#git","text":"Show folder content: ls -la","title":"Git"},{"location":"git/#setup","text":"See where Git is located: which git Get the version of Git: git --version Create an alias (shortcut) for git status : git config --global alias.st status Help: git help","title":"Setup"},{"location":"git/#general","text":"Initialize Git: git init Get everything ready to commit: git add . Get custom file ready to commit: git add index.html Commit changes: git commit -m \"Message\" Commit changes with title and description: git commit -m \"Title\" -m \"Description...\" Add and commit in one step: git commit -am \"Message\" Remove files from Git: git rm index.html Update all changes: git add -u Remove file but do not track anymore: git rm --cached index.html Move or rename files: git mv index.html dir/index_new.html Undo modifications (restore files from latest commited version): git checkout -- index.html Restore file from a custom commit (in current branch): git checkout 6eb715d -- index.html","title":"General"},{"location":"git/#reset","text":"Go back to commit: git revert 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Soft reset (move HEAD only; neither staging nor working dir is changed): git reset --soft 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Undo latest commit: git reset --soft HEAD~ Mixed reset (move HEAD and change staging to match repo; does not affect working dir): git reset --mixed 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Hard reset (move HEAD and change staging dir and working dir to match repo): git reset --hard 073791e7dd71b90daa853b2c5acc2c925f02dbc6 Hard reset of a single file ( @ is short for HEAD ): git checkout @ -- index.html","title":"Reset"},{"location":"git/#update-delete","text":"Test-Delete untracked files: git clean -n Delete untracked files (not staging): git clean -f Unstage (undo adds): git reset HEAD index.html Update most recent commit (also update the commit message): git commit --amend -m \"New Message\"","title":"Update &amp; Delete"},{"location":"git/#branch","text":"Show branches: git branch Create branch: git branch branchname Change to branch: git checkout branchname Create and change to new branch: git checkout -b branchname Rename branch: git branch -m branchname new_branchname or: git branch --move branchname new_branchname Show all completely merged branches with current branch: git branch --merged Delete merged branch (only possible if not HEAD): git branch -d branchname or: git branch --delete branchname Delete not merged branch: git branch -D branch_to_delete","title":"Branch"},{"location":"git/#merge","text":"True merge (fast forward): git merge branchname Merge to master (only if fast forward): git merge --ff-only branchname Merge to master (force a new commit): git merge --no-ff branchname Stop merge (in case of conflicts): git merge --abort Stop merge (in case of conflicts): git reset --merge // prior to v1.7.4 Undo local merge that hasn't been pushed yet: git reset --hard origin/master Merge only one specific commit: git cherry-pick 073791e7 Rebase: git checkout branchname \u00bb git rebase master or: git merge master branchname (The rebase moves all of the commits in master onto the tip of branchname .) Cancel rebase: git rebase --abort Squash multiple commits into one: git rebase -i HEAD~3 ( source ) Squash-merge a feature branch (as one commit): git merge --squash branchname (commit afterwards)","title":"Merge"},{"location":"git/#stash","text":"Put in stash: git stash save \"Message\" Show stash: git stash list Show stash stats: git stash show stash@{0} Show stash changes: git stash show -p stash@{0} Use custom stash item and drop it: git stash pop stash@{0} Use custom stash item and do not drop it: git stash apply stash@{0} Use custom stash item and index: git stash apply --index Create branch from stash: git stash branch new_branch Delete custom stash item: git stash drop stash@{0} Delete complete stash: git stash clear","title":"Stash"},{"location":"git/#gitignore-gitkeep","text":"About: https://help.github.com/articles/ignoring-files Useful templates: https://github.com/github/gitignore Add or edit gitignore: nano .gitignore Track empty dir: touch dir/.gitkeep","title":"Gitignore &amp; Gitkeep"},{"location":"git/#log","text":"Show commits: git log Show oneline-summary of commits: git log --oneline Show oneline-summary of commits with full SHA-1: git log --format=oneline Show oneline-summary of the last three commits: git log --oneline -3 Show only custom commits: git log --author=\"Sven\" git log --grep=\"Message\" git log --until=2013-01-01 git log --since=2013-01-01 Show only custom data of commit: git log --format=short git log --format=full git log --format=fuller git log --format=email git log --format=raw Show changes: git log -p Show every commit since special commit for custom file only: git log 6eb715d.. index.html Show changes of every commit since special commit for custom file only: git log -p 6eb715d.. index.html Show stats and summary of commits: git log --stat --summary Show history of commits as graph: git log --graph Show history of commits as graph-summary: git log --oneline --graph --all --decorate","title":"Log"},{"location":"git/#compare","text":"Compare modified files: git diff Compare modified files and highlight changes only: git diff --color-words index.html Compare modified files within the staging area: git diff --staged Compare branches: git diff master..branchname Compare branches like above: git diff --color-words master..branchname^ Compare commits: git diff 6eb715d git diff 6eb715d..HEAD git diff 6eb715d..537a09f Compare commits of file: git diff 6eb715d index.html git diff 6eb715d..537a09f index.html Compare without caring about spaces: git diff -b 6eb715d..HEAD or: git diff --ignore-space-change 6eb715d..HEAD Compare without caring about all spaces: git diff -w 6eb715d..HEAD or: git diff --ignore-all-space 6eb715d..HEAD Useful comparings: git diff --stat --summary 6eb715d..HEAD Blame: git blame -L10,+1 index.html","title":"Compare"},{"location":"git/#releases-version-tags","text":"Show all released versions: git tag Show all released versions with comments: git tag -l -n1 Create release version: git tag v1.0.0 Create release version with comment: git tag -a v1.0.0 -m 'Message' Checkout a specific release version: git checkout v1.0.0","title":"Releases &amp; Version Tags"},{"location":"git/#collaborate","text":"Show remote: git remote Show remote details: git remote -v Add remote upstream from GitHub project: git remote add upstream https://github.com/user/project.git Add remote upstream from existing empty project on server: git remote add upstream ssh://root@123.123.123.123/path/to/repository/.git Fetch: git fetch upstream Fetch a custom branch: git fetch upstream branchname:local_branchname Merge fetched commits: git merge upstream/master Remove origin: git remote rm origin Show remote branches: git branch -r Show all branches (remote and local): git branch -a Create and checkout branch from a remote branch: git checkout -b local_branchname upstream/remote_branchname Compare: git diff origin/master..master Push (set default with -u ): git push -u origin master Push: git push origin master Force-Push: `git push origin master --force Pull: git pull Pull specific branch: git pull origin branchname Fetch a pull request on GitHub by its ID and create a new branch: git fetch upstream pull/ID/head:new-pr-branch Clone to localhost: git clone https://github.com/user/project.git or: git clone ssh://user@domain.com/~/dir/.git Clone to localhost folder: git clone https://github.com/user/project.git ~/dir/folder Clone specific branch to localhost: git clone -b branchname https://github.com/user/project.git Clone with token authentication (in CI environment): git clone https://oauth2: token @gitlab.com/username/repo.git Delete remote branch (push nothing): git push origin :branchname or: git push origin --delete branchname","title":"Collaborate"},{"location":"git/#archive","text":"Create a zip-archive: git archive --format zip --output filename.zip master Export/write custom log to a file: git log --author=sven --all log.txt","title":"Archive"},{"location":"git/#troubleshooting","text":"Ignore files that have already been committed to a Git repository: http://stackoverflow.com/a/1139797/1815847","title":"Troubleshooting"},{"location":"git/#security","text":"Hide Git on the web via .htaccess : RedirectMatch 404 /\\.git (more info here: http://stackoverflow.com/a/17916515/1815847)","title":"Security"},{"location":"git/#large-file-storage","text":"Website: https://git-lfs.github.com/ Install: brew install git-lfs Track *.psd files: git lfs track \"*.psd\" (init, add, commit and push as written above)","title":"Large File Storage"},{"location":"git_commands/","text":"Git Commands Basics git init git add . git commit -m \"first commit\" git remote add origin git@bitbucket.org:my_friends_gsl/ad_docker-compose.git git push -u origin master git tag v0.1 git push origin v0.1 Advance git log # git history git log --all --decorate --oneline --graph # commit history graph git branch (branch-name) = create a branch git checkout (branch-name) # checkout a branch/move head pointer git commit -a -m \"commit message\" # commit all modified and tracked files in on command (bypass separate 'git add' command) git diff master..SDN #diff between 2 branches git merge (branch-name) # merge branches (fast-forward and 3-way merges) git branch --merged # see branches merged into the current branch git branch -d (branch-name) # delete a branch, only if already merged git branch -D (branch-name) # delete a branch, including if not already merged (exercise caution here) git merge --abort # abort a merge during a merge conflict situation git checkout (commit-hash) # checkout a commit directly, not through a branch, results in a detached HEAD state git stash # create a stash point git stash list # list stash points git stash list -p # list stash points and show diffs per stash git stash apply # apply most recent stash git stash pop #apply most recent stash, and remove it from saved stashes git stash apply (stash reference) # apply a specific stash point git stash save \"(description)\" # create a stash point, be more descriptive Git global setup git config --global user.name \"Piyush Naphade\" git config --global user.email \"piyush.naphade@gslab.com\" Existing folder cd existing_folder git init git remote add origin git@gitlab.com:Piyushn88/gcp_app_engine_django.git git add . git commit -m \"Initial commit\" git push -u origin master Push an existing repository from the command line git remote add origin https://github.com/piyushn88/Mongo-on-Kube.git git push -u origin master Push using diff branch git status git add . git status git checkout wip git status git commit -m \" Add your msg \" git push origin wip Add submodule git submodule add git@github xyz .git cat .gitmodules git diff --cached Mongo-on-Kube git diff --cached --submodule git commit -am \"Added mongo submodule\" git push -u origin master Understanding All the other answers are great, but I find it best to understand them by breaking down files into three categories: unstaged, staged, commit: --hard should be easy to understand, it restores everything --mixed (default) : unstaged files: don't change staged files: move to unstaged commit files: move to unstaged --soft : unstaged files: don't change staged files: dont' change commit files: move to staged In summary: --soft option will move everything (except unstaged files) into staging area --mixed option will move everything into unstaged area","title":"Git_Commands"},{"location":"git_commands/#git-commands","text":"","title":"Git Commands"},{"location":"git_commands/#basics","text":"git init git add . git commit -m \"first commit\" git remote add origin git@bitbucket.org:my_friends_gsl/ad_docker-compose.git git push -u origin master git tag v0.1 git push origin v0.1","title":"Basics"},{"location":"git_commands/#advance","text":"git log # git history git log --all --decorate --oneline --graph # commit history graph git branch (branch-name) = create a branch git checkout (branch-name) # checkout a branch/move head pointer git commit -a -m \"commit message\" # commit all modified and tracked files in on command (bypass separate 'git add' command) git diff master..SDN #diff between 2 branches git merge (branch-name) # merge branches (fast-forward and 3-way merges) git branch --merged # see branches merged into the current branch git branch -d (branch-name) # delete a branch, only if already merged git branch -D (branch-name) # delete a branch, including if not already merged (exercise caution here) git merge --abort # abort a merge during a merge conflict situation git checkout (commit-hash) # checkout a commit directly, not through a branch, results in a detached HEAD state git stash # create a stash point git stash list # list stash points git stash list -p # list stash points and show diffs per stash git stash apply # apply most recent stash git stash pop #apply most recent stash, and remove it from saved stashes git stash apply (stash reference) # apply a specific stash point git stash save \"(description)\" # create a stash point, be more descriptive","title":"Advance"},{"location":"git_commands/#git-global-setup","text":"git config --global user.name \"Piyush Naphade\" git config --global user.email \"piyush.naphade@gslab.com\"","title":"Git global setup"},{"location":"git_commands/#existing-folder","text":"cd existing_folder git init git remote add origin git@gitlab.com:Piyushn88/gcp_app_engine_django.git git add . git commit -m \"Initial commit\" git push -u origin master","title":"Existing folder"},{"location":"git_commands/#push-an-existing-repository-from-the-command-line","text":"git remote add origin https://github.com/piyushn88/Mongo-on-Kube.git git push -u origin master","title":"Push an existing repository from the command line"},{"location":"git_commands/#push-using-diff-branch","text":"git status git add . git status git checkout wip git status git commit -m \" Add your msg \" git push origin wip","title":"Push using diff branch"},{"location":"git_commands/#add-submodule","text":"git submodule add git@github xyz .git cat .gitmodules git diff --cached Mongo-on-Kube git diff --cached --submodule git commit -am \"Added mongo submodule\" git push -u origin master","title":"Add submodule"},{"location":"git_commands/#understanding","text":"All the other answers are great, but I find it best to understand them by breaking down files into three categories: unstaged, staged, commit: --hard should be easy to understand, it restores everything --mixed (default) : unstaged files: don't change staged files: move to unstaged commit files: move to unstaged --soft : unstaged files: don't change staged files: dont' change commit files: move to staged In summary: --soft option will move everything (except unstaged files) into staging area --mixed option will move everything into unstaged area","title":"Understanding"},{"location":"minikube/","text":"Installation Minikube Install Docker CE * Install Docker CE Edition * 1. sudo apt-get update 2. sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common 3. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 4. sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" 5. sudo apt-get update 6. sudo apt-get install docker-ce 7. docker version Install kubectl ( v1.7.0 is latest): Instructions here * Install KubeCtl * 1. curl -LO https://storage.googleapis.com/kubernetes-release/ release/$(curl -s https://storage.googleapis.com/kubernetes-release/ release/stable.txt)/bin/linux/amd64/kubectl 2. chmod +x ./kubectl 3. sudo mv ./kubectl /usr/local/bin/kubectl 4. kubectl version Install minikube ( v0.21.0 is latest): Instructions here * Install MiniKube * 1. curl -Lo minikube https://storage.googleapis.com/minikube/ releases/latest/minikube-linux-amd64 chmod +x minikube 2. sudo install minikube /usr/local/bin * Install VirtualBox * 1. wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - 2. sudo apt-get update 3. sudo apt-get install virtualbox Configure your cluster: $ minikube config set memory 4096 $ minikube config set cpus 2 $ minikube config set disk-size 30g Set --memory , --cpus , --disk-size to values acceptable to you and resources available on your hosting environment. The above should be considered minimums. minikube start --cpus 4 --memory 8192 --disk-size=80GB Configure your hypervisor 5.1 For MacOS/VirtualBox $ minikube config set vm-driver virtualbox 5.2 For Linux/KVM: $ minikube config set vm-driver kvm Note that --vm-driver is hosting OS specific. For MacOS use one of virtualbox or xhyve . Start your cluster: $ minikube start (Optional) Enable heapster for memory cpu usage statistics: minikube addons enable heapster Install helm 8.1 For MacOS brew install kubernetes-helm 8.2 For Linux sudo snap install helm --classic 8.3 Run Helm and wait for kube-system pods up helm init Impartant commands eval $(minikube docker-env) Important note : You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session. Stop your cluster: $ minikube stop","title":"Minikube"},{"location":"minikube/#installation-minikube","text":"Install Docker CE * Install Docker CE Edition * 1. sudo apt-get update 2. sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common 3. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 4. sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" 5. sudo apt-get update 6. sudo apt-get install docker-ce 7. docker version Install kubectl ( v1.7.0 is latest): Instructions here * Install KubeCtl * 1. curl -LO https://storage.googleapis.com/kubernetes-release/ release/$(curl -s https://storage.googleapis.com/kubernetes-release/ release/stable.txt)/bin/linux/amd64/kubectl 2. chmod +x ./kubectl 3. sudo mv ./kubectl /usr/local/bin/kubectl 4. kubectl version Install minikube ( v0.21.0 is latest): Instructions here * Install MiniKube * 1. curl -Lo minikube https://storage.googleapis.com/minikube/ releases/latest/minikube-linux-amd64 chmod +x minikube 2. sudo install minikube /usr/local/bin * Install VirtualBox * 1. wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - 2. sudo apt-get update 3. sudo apt-get install virtualbox Configure your cluster: $ minikube config set memory 4096 $ minikube config set cpus 2 $ minikube config set disk-size 30g Set --memory , --cpus , --disk-size to values acceptable to you and resources available on your hosting environment. The above should be considered minimums. minikube start --cpus 4 --memory 8192 --disk-size=80GB Configure your hypervisor 5.1 For MacOS/VirtualBox $ minikube config set vm-driver virtualbox 5.2 For Linux/KVM: $ minikube config set vm-driver kvm Note that --vm-driver is hosting OS specific. For MacOS use one of virtualbox or xhyve . Start your cluster: $ minikube start (Optional) Enable heapster for memory cpu usage statistics: minikube addons enable heapster Install helm 8.1 For MacOS brew install kubernetes-helm 8.2 For Linux sudo snap install helm --classic 8.3 Run Helm and wait for kube-system pods up helm init Impartant commands eval $(minikube docker-env) Important note : You have to run eval $(minikube docker-env) on each terminal you want to use, since it only sets the environment variables for the current shell session. Stop your cluster: $ minikube stop","title":"Installation Minikube"}]}